#pragma checksum "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\Pages\Calculator.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0ffc1d255b436dfbcf09aaa81e069d5e13efa40a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ore_Calculator.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Ore_Calculator;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\_Imports.razor"
using Ore_Calculator.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/calculator")]
    public partial class Calculator : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 64 "C:\Users\Bruger\Documents\GitHub\EvE-Ore-Import-Calculator\Desktop\Ore Calculator\Pages\Calculator.razor"
       
    // Field Variables
    private List<Ore> ores, workingOres;
    private List<Mineral> minerals, workingMinerals;
    private bool buttonClicked = false, calculationFinished = false;
    private int reprocessingEfficiency = 80;

    // Variables for ease of use
    public static string TRITANIUM_STRING = "Tritanium",
        PYERITE_STRING = "Pyerite",
        MEXALLON_STRING = "Mexallon",
        ISOGEN_STRING = "Isogen",
        NOCXIUM_STRING = "Nocxium",
        ZYDRINE_STRING = "Zydrine",
        MEGACYTE_STRING = "Megacyte";

    public static string[] ORE_STRINGS = new string[]
    {
        TRITANIUM_STRING,
        PYERITE_STRING,
        MEXALLON_STRING,
        ISOGEN_STRING,
        NOCXIUM_STRING,
        ZYDRINE_STRING,
        MEGACYTE_STRING
                                        };

    public int getMineralNumber(String mineralName)
    {
        for (int i = 0; i < ORE_STRINGS.Length; i++)
        {
            if (ORE_STRINGS[i].Equals(mineralName))
                return i;
        }
        return -1;
    }

    // Initialize
    protected override async Task OnInitializedAsync()
    {
        // Initialize Mineral List
        minerals = new List<Mineral>();

        for (int i = 0; i < ORE_STRINGS.Length; i++)
        {
            minerals.Add(new Mineral(ORE_STRINGS[i], 0));
        }

        HttpResponseMessage json = await Http.GetAsync("sample-data/OreToMineral.json");
        string jsonString = await json.Content.ReadAsStringAsync();
        ores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Ore>>(jsonString);
    }

    // Calculate Button click handler
    private void OnClick()
    {
        calculationFinished = false;
        buttonClicked = true;

        Console.WriteLine("Minerales requested, showing or");
        foreach (Mineral m in minerals)
        {
            Console.WriteLine("Name: " + m.Name + ", amount: " + m.Amount);
        }
        Console.WriteLine();

        // Initialize Mineral List
        workingMinerals = new List<Mineral>();

        for (int i = 0; i < ORE_STRINGS.Length; i++)
        {
            workingMinerals.Add(new Mineral(ORE_STRINGS[i], 0));
        }

        workingOres = ores;

        CalculateMinerals(75);
        CalculateMinerals(100);
        calculationFinished = true;
    }

    private void CalculateMinerals(int targetProcent)
    {
        for (int i = ores.Count - 1; i >= 0; i--)
        {
            Ore o = workingOres[i];
            int n = getMineralNumber(o.KeyMineral);
            double r = (double) reprocessingEfficiency / 100;

            Mineral m = null;
            foreach(Mineral min in o.Minerals)
            {
                if (min.Name.Equals(o.KeyMineral))
                {
                    m = min;
                    break;
                }
            }

            if (workingMinerals[n].Amount >= minerals[n].Amount)
                continue;

            o.Amount += (int) Math.Ceiling((double) ((((minerals[n].Amount / r * targetProcent) / 100) - workingMinerals[n].Amount) / m.Amount));

            foreach(Mineral min in o.Minerals)
            {
                workingMinerals[getMineralNumber(min.Name)].Amount = (int) Math.Floor(o.Amount * (m.Amount * r));
            }

            workingOres[i] = o;
        }
    }

    // Inner classes for Data storage
    public class Ore
    {
        [Newtonsoft.Json.JsonProperty("Name")]
        public string Name { get; set; }
        [Newtonsoft.Json.JsonProperty("Volume")]
        public float Volume { get; set; }
        [Newtonsoft.Json.JsonProperty("Minerals")]
        public List<Mineral> Minerals { get; set; }
        [Newtonsoft.Json.JsonProperty("KeyMineral")]
        public string KeyMineral { get; set; }

        public int Amount { get; set; }
    }

    public class Mineral
    {
        [Newtonsoft.Json.JsonProperty("Name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount")]
        public int Amount { get; set; }

        public Mineral(string Name, int Amount)
        {
            this.Name = Name;
            this.Amount = Amount;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
